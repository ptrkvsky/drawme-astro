---
import Circle from "@features/project/components/Circle.astro";
import { SanityProject } from "@features/project/interfaces/";

interface Props {
  nextProject: SanityProject;
}

const { nextProject } = Astro.props;
---

<script>
  import { ParamsSplitAndReveal, splitAndReveal } from "@helpers/gsap";
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";
  import config from "src/config";

  gsap.registerPlugin(ScrollTrigger);

  window.addEventListener("load", function () {
    const portalDiv = document.getElementById("portal");
    const nextProjectDiv = document.getElementById("next-project");
    if (!nextProjectDiv || !portalDiv) return;

    portalDiv.appendChild(nextProjectDiv);
  });

  function displayNextProject(direction: number) {
    const paramsSplitReveal: ParamsSplitAndReveal = {
      element: ".reveal",
      typeSplit: "chars",
      trigger: "body",
      delay: 0.35,
    };

    if (direction == 1) {
      // Reveal
      gsap
        .timeline({
          scrollTrigger: {
            trigger: "#next-project",
            start: "top 85%", // top of the element, bottom of the viewport
          },
          delay: 1.75,
        })
        .call(() => {
          document.getElementById("next-project")?.classList.toggle("visible");
          splitAndReveal(paramsSplitReveal);
        })
        .to(`#svg-cercle-line-1`, {
          drawSVG: true,
          ease: `power3.inOut`,
          delay: 1,
          duration: 1.5,
        });
    }
    if (direction == -1) {
      // Hide
      gsap
        .timeline({
          scrollTrigger: {
            trigger: "#next-project",
            start: "top 85%", // top of the element, bottom of the viewport
          },
        })
        .call(() => {
          document.getElementById("next-project")?.classList.toggle("visible");
        })
        .to(`#svg-cercle-line-1`, {
          drawSVG: false,
          ease: `power3.inOut`,
          delay: 0,
          duration: 0.5,
        })
        .call(() => {
          splitAndReveal(paramsSplitReveal);
        });
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    gsap.to(`#svg-cercle-line-1`, {
      drawSVG: false,
    });

    const marker = {
      startColor: "purple",
      endColor: "pink",
      fontSize: "36px",
      fontWeight: "bold",
      indent: 20,
    };

    const markers = config.mode === "development" ? marker : false;

    ScrollTrigger.create({
      trigger: "#trigger-next-project",
      start: "140px bottom",
      endTrigger: "footer",
      markers: markers,
      onToggle: (e) => {
        displayNextProject(e.direction);
      },
    });
  });
</script>

<div id="next-project" class="next-project">
  <div id="wrapper-next" class="wrapper-next-project">
    <p id="see-next" class="see-next">
      <span class="reveal line1">See</span><span class="highlight reveal line1"
        >nex<span class="glitch reveal line1">t</span>
      </span>
      <span class="line reveal glitch line2">Project ?</span>
    </p>
    <div class="answers">
      <Circle link={`/projects/${nextProject.slug.current}`} />
      <button id="no-answer" class="reveal no-answer js-to-top"
        >No thanks</button
      >
    </div>
  </div>
</div>
<style lang="scss" is:global>
  .next-project {
    position: fixed;
    top: 0;
    width: 100%;
    height: calc(100% - clamp(111px, 15rem, 15rem));

    display: flex;
    align-items: center;
    justify-content: center;

    background-color: black;
    z-index: -1;
    opacity: 0;
    transition: all ease-in-out 0.3s;

    pointer-events: none;

    &.visible {
      z-index: 999;
      opacity: 1;
      pointer-events: all;
    }

    .line {
      position: relative;
    }
  }

  .wrapper-next-project {
    position: absolute;
    top: 50%;
    transform: translateY(-54%);
    width: clamp(80%, 163rem, 163rem);
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }

  .see-next {
    font-family: var(--text-script);
    color: var(--color-white-beauty);
    .line {
      display: block;
    }
    .line1 {
      font-size: clamp(100px, 35.7rem, 357px);
      &.glitch {
        position: relative;
        // bottom: 1rem;
      }
    }

    .highlight {
      color: var(--color-ice-ice-baby);
    }
    .glitch {
      font-family: var(--text-script-bold);
    }

    .line2 {
      position: relative;
      bottom: 5rem;
      font-size: clamp(88px, 31rem, 311px);
    }
  }

  .answers {
    position: relative;
    top: 5rem;

    width: 100%;
    display: flex;
    justify-content: flex-end;
    gap: clamp(16px, 2.4rem, 2.4rem);

    color: var(--color-white-beauty);
    font-family: var(--text-body-bold);
    font-size: clamp(20px, 4rem, 4rem);

    @media screen and (max-width: 768px) {
      flex-direction: column;
    }
    .no-answer {
      text-align: center;
      border: none;
      background-color: transparent;
      color: var(--color-white-beauty);
      font-family: var(--text-body-bold);
      font-size: clamp(16px, 2.5rem, 2.5rem);
      cursor: pointer;
      transition: all 0.3s linear;

      &:hover {
        color: var(--color-ice-ice-baby);
      }
    }

    .lets-go {
      &:hover {
        color: var(--color-ice-ice-baby);
      }
      @media screen and (max-width: 768px) {
        position: relative;
        top: initial;
        left: initial;
        transform: none;

        .text {
          font-size: 24px;
        }
      }
    }
  }
</style>
