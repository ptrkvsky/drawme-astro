---
import { portableTextComponents } from '@helpers/portableTextComponents';
import { toHTML } from '@portabletext/to-html';

interface AstroProps {
  projectColor: string;
  text: any[];
  textColor: string | null;
}
const { projectColor, text, textColor } = Astro.props as AstroProps;

const textPresentation = toHTML(text, {
  components: portableTextComponents,
});

const finalTextColor = textColor || '#000';
---

<script defer define:vars={{ textPresentation, projectColor }}>
  document.addEventListener('DOMContentLoaded', function () {
    const wrapper = document.getElementById('presentation-client');
    const background = document.getElementById('bg-presentation');

    background.style.backgroundColor = projectColor;
    wrapper.style.backgroundColor = projectColor;

    const setHeight = () => {
      const height = wrapper.clientHeight;
      background.style.height = `${height}px`;
    };

    setHeight();
    window.addEventListener('resize', setHeight);
  });
</script>

<div
  id="presentation-client"
  class="presentation-client"
  style={{ color: finalTextColor }}
  set:html={textPresentation}
>
  <div id="bg-presentation" class="background"></div>
</div>

<style lang="scss" is:global>
  .presentation-client {
    padding: 3rem 0 0rem 6rem;
    font-size: clamp(21px, 2.1rem, 2.1rem);
    letter-spacing: 1.1px;
    line-height: 1.2;
    border-bottom-left-radius: 9rem;

    p {
      margin-bottom: 3.2rem;
      line-height: 1.3;
    }

    h2 {
      font-size: clamp(22px, 2.2rem, 2.2rem);
      font-family: 'MontrealMedium';
      margin-bottom: 0.4rem;
    }

    .background {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 20%;
      z-index: -1;
    }
  }
</style>
