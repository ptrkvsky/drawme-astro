---
import { getImage } from '@astrojs/image';

const { src: illustrationWebsite } = await getImage({
  src: import('@assets/images/illustration_website.png'),
});
const { src: illustrationPackaging } = await getImage({
  src: import('@assets/images/illustration_packaging.png'),
});
const { src: illustrationSocial } = await getImage({
  src: import('@assets/images/illustration_social.png'),
});
const { src: illustrationLogo } = await getImage({
  src: import('@assets/images/illustration_logo.png'),
});
const { src: illustrationIdentity } = await getImage({
  src: import('@assets/images/illustration_identity.png'),
});
---

<script>
  import { Curtains, Plane, Vec2 } from 'curtainsjs';
  window.addEventListener('load', () => {
    // track the mouse positions to send it to the shaders
    const mousePosition = new Vec2();
    // we will keep track of the last position in order to calculate the movement strength/delta
    const mouseLastPosition = new Vec2();

    const deltas = {
      max: 0,
      applied: 0,
    };

    // set up the webGL context
    const curtains = new Curtains({
      container: 'canva-website',
      watchScroll: false,
      pixelRatio: Math.min(1.5, window.devicePixelRatio),
    });

    // handling errors
    curtains
      .onError(() => {
        // we will add a class to the document body to display original images
        document.body.classList.add('no-curtains');
      })
      .onContextLost(() => {
        // on context lost, try to restore the context
        curtains.restoreContext();
      });

    // get our plane element
    const planeElements = document.getElementsByClassName('curtain');

    const vs = `
        precision mediump float;

        // default mandatory variables
        attribute vec3 aVertexPosition;
        attribute vec2 aTextureCoord;

        uniform mat4 uMVMatrix;
        uniform mat4 uPMatrix;
        
        // our texture matrix uniform
        uniform mat4 simplePlaneTextureMatrix;

        // custom variables
        varying vec3 vVertexPosition;
        varying vec2 vTextureCoord;

        uniform float uTime;
        uniform vec2 uResolution;
        uniform vec2 uMousePosition;
        uniform float uMouseMoveStrength;


        void main() {

            vec3 vertexPosition = aVertexPosition;

            // get the distance between our vertex and the mouse position
            float distanceFromMouse = distance(uMousePosition, vec2(vertexPosition.x, vertexPosition.y));

            // calculate our wave effect
            float waveSinusoid = cos(5.0 * (distanceFromMouse - (uTime / 75.0)));

            // attenuate the effect based on mouse distance
            float distanceStrength = (0.4 / (distanceFromMouse + 0.4));

            // calculate our distortion effect
            float distortionEffect = distanceStrength * waveSinusoid * uMouseMoveStrength;

            // apply it to our vertex position
            vertexPosition.z +=  distortionEffect / 30.0;
            vertexPosition.x +=  (distortionEffect / 30.0 * (uResolution.x / uResolution.y) * (uMousePosition.x - vertexPosition.x));
            vertexPosition.y +=  distortionEffect / 30.0 * (uMousePosition.y - vertexPosition.y);

            gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);

            // varyings
            vTextureCoord = (simplePlaneTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
            vVertexPosition = vertexPosition;
        }
    `;

    const fs = `
        precision mediump float;

        varying vec3 vVertexPosition;
        varying vec2 vTextureCoord;

        uniform sampler2D simplePlaneTexture;

        void main() {
            // apply our texture
            vec4 finalColor = texture2D(simplePlaneTexture, vTextureCoord);

            // fake shadows based on vertex position along Z axis
            finalColor.rgb -= clamp(-vVertexPosition.z, 0.0, 1.0);
            // fake lights based on vertex position along Z axis
            finalColor.rgb += clamp(vVertexPosition.z, 0.0, 1.0);

            // handling premultiplied alpha (useful if we were using a png with transparency)
            finalColor = vec4(finalColor.rgb * finalColor.a, finalColor.a);

            gl_FragColor = finalColor;
        }
    `;

    // some basic parameters
    const params = {
      vertexShader: vs,
      fragmentShader: fs,
      widthSegments: 20,
      heightSegments: 20,
      uniforms: {
        resolution: {
          // resolution of our plane
          name: 'uResolution',
          type: '2f', // notice this is an length 2 array of floats
          value: [planeElements[0].clientWidth, planeElements[0].clientHeight],
        },
        time: {
          // time uniform that will be updated at each draw call
          name: 'uTime',
          type: '1f',
          value: 0,
        },
        mousePosition: {
          // our mouse position
          name: 'uMousePosition',
          type: '2f', // again an array of floats
          value: mousePosition,
        },
        mouseMoveStrength: {
          // the mouse move strength
          name: 'uMouseMoveStrength',
          type: '1f',
          value: 0,
        },
      },
    };

    console.log(planeElements);
    // some basic parameters

    // handle the mouse move event
    function handleMovement(e, plane) {
      // update mouse last pos
      mouseLastPosition.copy(mousePosition);

      const mouse = new Vec2();

      // touch event
      if (e.targetTouches) {
        mouse.set(e.targetTouches[0].clientX, e.targetTouches[0].clientY);
      }
      // mouse event
      else {
        mouse.set(e.clientX, e.clientY);
      }

      // lerp the mouse position a bit to smoothen the overall effect
      mousePosition.set(
        curtains.lerp(mousePosition.x, mouse.x, 0.3),
        curtains.lerp(mousePosition.y, mouse.y, 0.3)
      );

      // convert our mouse/touch position to coordinates relative to the vertices of the plane and update our uniform
      plane.uniforms.mousePosition.value =
        plane.mouseToPlaneCoords(mousePosition);

      // calculate the mouse move strength
      if (mouseLastPosition.x && mouseLastPosition.y) {
        let delta =
          Math.sqrt(
            Math.pow(mousePosition.x - mouseLastPosition.x, 2) +
              Math.pow(mousePosition.y - mouseLastPosition.y, 2)
          ) / 30;
        delta = Math.min(4, delta);
        // update max delta only if it increased
        if (delta >= deltas.max) {
          deltas.max = delta;
        }
      }
    }

    // create our plane
    const simplePlane = new Plane(curtains, planeElements[0], params);

    // if there has been an error during init, simplePlane will be null
    simplePlane
      .onReady(() => {
        // set a fov of 35 to reduce perspective (we could have used the fov init parameter)
        simplePlane.setPerspective(5);

        // apply a little effect once everything is ready
        deltas.max = 2;

        // now that our plane is ready we can listen to mouse move event
        const wrapper = document.getElementById('wrapper-website');

        wrapper.addEventListener('mousemove', (e) => {
          handleMovement(e, simplePlane);
        });

        wrapper.addEventListener(
          'touchmove',
          (e) => {
            handleMovement(e, simplePlane);
          },
          {
            passive: true,
          }
        );
      })
      .onRender(() => {
        // increment our time uniform
        simplePlane.uniforms.time.value++;

        // decrease both deltas by damping : if the user doesn't move the mouse, effect will fade away
        deltas.applied += (deltas.max - deltas.applied) * 0.02;
        deltas.max += (0 - deltas.max) * 0.01;

        // send the new mouse move strength value
        simplePlane.uniforms.mouseMoveStrength.value = deltas.applied;
      })
      .onAfterResize(() => {
        const planeBoundingRect = simplePlane.getBoundingRect();
        simplePlane.uniforms.resolution.value = [
          planeBoundingRect.width,
          planeBoundingRect.height,
        ];
      })
      .onError(() => {
        // we will add a class to the document body to display original images
        document.body.classList.add('no-curtains');
      });
  });

  import {
    setIllustrationsLagAndSpeed,
    setTextsLagAndSpeed,
  } from './SectionProjects.functions';
  import {
    revealTexts,
    revealIllustrations,
  } from './SectionProjects.animations';

  window.addEventListener('DOMContentLoaded', () => {
    setIllustrationsLagAndSpeed();
    setTextsLagAndSpeed();
    revealTexts();
    revealIllustrations();
  });
</script>

<section id="section-projets" class="section-projets">
  <div class="wrapper-description-title">
    <h2 id="section-projets-title" class="title">
      What would i draw for <span id="draw-for-you" class="yes zigwigwi">
        you <svg
          class="svg-zigwigwi"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 500 150"
          preserveAspectRatio="none"
        >
          <path
            id="draw-for-you__path"
            class="path-zigwigwi"
            d="M9.3,127.3c49.3-3,150.7-7.6,199.7-7.4c121.9,0.4,189.9,0.4,282.3,7.2C380.1,129.6,181.2,130.6,70,139 c82.6-2.9,254.2-1,335.9,1.3c-56,1.4-137.2-0.3-197.1,9"
          ></path>
        </svg>
      </span> ?
    </h2>
    <p id="section-projets-description" class="description opacity-0">
      Drawmeasheep is an innovative graphic studio. It was a created by MÃ©lody
      A.Nour, a freelance graphic designer that has always been passionate in
      all kinds of visual arts. The studio also provides you with all kind of
      graphic & web services. The goal is to be able to create a very unique
      identity for your brand. Let's make your creative project happen.
    </p>
  </div>
  <!-- WEBSITE -->
  <a
    id="wrapper-website"
    href="/projects/cats-business-club"
    class="wrapper-illustration-title website"
  >
    <div class="relative">
      <h3
        class="sub-title"
        id="subtitle-website"
        class="split-text"
        data-speed="0.93"
        data-lag="0.04"
      >
        Website
      </h3>
      <div class="illustration" data-speed="1.07" data-lag="0.05">
        <div id="curtain-website">
          <div id="canva-website"></div>
          <div class="curtain">
            <img
              crossorigin=""
              data-sampler="simplePlaneTexture"
              src={illustrationWebsite}
              alt="Illustration website"
            />
          </div>
        </div>
      </div>
    </div>
  </a>

  <!-- IDENTITY -->
  <div class="wrapper-illustration-title identity">
    <div class="relative">
      <h3
        id="subtitle-identity"
        class="sub-title"
        data-speed="0.93"
        data-lag="0.04"
      >
        Identity
      </h3>
      <div class="illustration" data-speed="0.95" data-lag="0.05">
        <img src={illustrationIdentity} alt="Illustration identity" />
      </div>
    </div>
  </div>

  <!-- LOGO -->
  <a href="/projects/infizio" class="wrapper-illustration-title logo">
    <div class="illustration" data-speed="0.98" data-lag="0.04">
      <img src={illustrationLogo} alt="Illustration logo" />
    </div>
    <h3 id="subtitle-logo" class="sub-title" data-speed="1.05" data-lag="0.03">
      Logotype
    </h3>
  </a>

  <!-- SOCIAL -->
  <a
    href="/projects/dissidente"
    class="wrapper-illustration-title social"
    data-speed="0.95"
    data-lag="0.05"
  >
    <div class="relative">
      <h3
        id="subtitle-social"
        class="sub-title"
        data-speed="0.95"
        data-lag="0.05"
      >
        Social networks
      </h3>
      <div class="illustration" data-speed="1.05" data-lag="0.04">
        <img src={illustrationSocial} alt="Illustration social" />
      </div>
    </div>
  </a>

  {
    /* <div class="wrapper-illustration-title layout" data-speed="0.85">
    <div class="illustration">
      <Image
        src="../../../../assets/images/illustration_layout.png"
        alt="Illustration layout"
      />
    </div>
  </div> */
  }
  <!--PACKAGING -->
  <div id="packaging" class="wrapper-illustration-title packaging">
    <h3
      id="subtitle-packaging"
      class="sub-title"
      data-speed="0.95"
      data-lag="0.05"
    >
      Packaging
    </h3>
    <div class="relative" data-speed="1.02" data-lag="0.04">
      <div class="illustration">
        <img src={illustrationPackaging} alt="Illustration packaging" />
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  #canva-website {
    width: 315px;
    height: 315px;
  }

  .illustration .curtain {
    position: absolute;
    top: 0;
    left: 0;
  }

  .illustration .curtain img {
    visibility: hidden;
  }

  .section-projets {
    position: relative;
    margin: 0 auto;
    max-width: 164rem;
    z-index: 10;
    font-size: 2.4rem;
    height: clamp(1000px, 125rem, 2450px);

    @media screen and (max-width: 1024px) {
      height: 100vh;
    }

    @media screen and (max-width: 768px) {
      height: auto;
    }

    @media screen and (max-width: 768px) {
      max-width: 100%;
      margin-top: 35px;
      padding: 12.3rem 35px 0 35px;
    }

    img {
      max-width: 100%;
      height: auto;
    }

    .title {
      text-align: center;
      font-size: clamp(
        34px,
        var(--font-size-heading),
        var(--font-size-heading)
      );
    }

    .sub-title {
      font-size: clamp(32px, 4.5rem, 4.5rem);
    }

    .wrapper-description-title {
      position: absolute;
      left: 50%;
      transform: translate(-50%);
      max-width: 56.1rem;
      top: 44.4rem;

      @media screen and (max-width: 768px) {
        position: relative;
        top: initial;
        left: initial;
        margin-bottom: 50px;
        max-width: 100%;
        transform: translate(0%);
      }

      .description {
        margin-top: 4.4rem;
        padding: 0 2rem;
        line-height: 1.4;
        letter-spacing: clamp(2px, 0.2rem, 0.2rem);
        font-weight: 800;
        font-size: clamp(16px, 2.1rem, 2.1rem);
        text-align: center;

        font-family: var(--text-body-thin);

        @media screen and (max-width: 768px) {
          display: none;
        }
      }
    }
    .wrapper-illustration-title {
      position: absolute;
      display: block;

      .illustration {
        opacity: 0;
      }

      @media screen and (max-width: 768px) {
        position: relative;
        margin-bottom: 50px;
      }

      &.website {
        top: 11.6rem;
        left: 0;
        padding-left: 4rem;

        @media screen and (max-width: 768px) {
          top: initial;
          left: initial;
          padding-left: 0;
        }

        .illustration {
          max-width: 35.9rem;
          @media screen and (max-width: 768px) {
            max-width: 203px;
            padding-left: 55px;
          }
        }

        .sub-title {
          position: absolute;
          top: 16.4rem;
          left: -12.2rem;
          color: var(--color-text);
          transform: rotate(-90deg);

          @media screen and (max-width: 768px) {
            left: 10px;
            top: 0px;
            writing-mode: vertical-lr;
            transform: rotate(-180deg);
          }
        }
      }

      &.layout {
        top: 0;
        left: 55rem;
        .illustration {
          max-width: 20rem;
        }
      }

      &.packaging {
        top: 4.8rem;
        left: 110.8rem;
        @media screen and (max-width: 768px) {
          top: initial;
          left: initial;
        }

        .illustration {
          max-width: clamp(300px, 34.5rem, 34.5rem);
        }
        .sub-title {
          padding-left: 3.6rem;
          margin-bottom: 1.1rem;
        }
      }

      &.social {
        top: 40.1rem;
        left: 132.5rem;

        @media screen and (max-width: 1280px) {
          top: 55rem;
          left: 116rem;
        }

        @media screen and (max-width: 1024px) {
          top: initial;
          bottom: 8rem;
        }

        @media screen and (max-width: 768px) {
          top: initial;
          bottom: initial;
          left: initial;
          display: flex;
          justify-content: flex-end;
          width: 100%;
        }

        .illustration {
          max-width: clamp(210px, 31rem, 31rem);
        }
        .sub-title {
          position: absolute;
          top: 20.9rem;
          left: -19.1rem;
          z-index: 10;
          transform: rotate(-270deg);
          -webkit-text-stroke: 1px black;
          color: transparent;

          @media screen and (max-width: 768px) {
            transform: rotate(-180deg);
            writing-mode: vertical-lr;

            top: 0px;
          }
        }
      }

      &.logo {
        top: 86.7rem;
        left: 69rem;
        @media screen and (max-width: 768px) {
          top: initial;
          left: initial;
        }

        .illustration {
          max-width: clamp(166px, 18.1rem, 18.1rem);
        }
        .sub-title {
          margin-top: 1.4rem;
        }
      }

      &.identity {
        top: 57.6rem;
        left: 22.2rem;

        @media screen and (max-width: 1374px) {
          left: 14.2rem;
        }
        @media screen and (max-width: 1200px) {
          left: 0rem;
        }

        @media screen and (max-width: 768px) {
          top: initial;
          left: initial;

          display: flex;
          width: 100%;
          justify-content: end;
        }

        .illustration {
          max-width: clamp(237px, 25.9rem, 25.9rem);
        }

        .sub-title {
          position: absolute;
          top: 16.4rem;
          left: -9.8rem;
          z-index: 10;
          transform: rotate(270deg);
          -webkit-text-stroke: 1px black;
          color: transparent;

          @media screen and (max-width: 768px) {
            left: -17px;
            top: 0;
            writing-mode: vertical-lr;
            transform: rotate(180deg);
          }
        }
      }
    }
  }
</style>
